# import * as approval from './approval.graphql'
# import * as notification from './notification.graphql'
# import * as orgUserConnection from './orgUserConnection.graphql'
# import * as user from './user.graphql'
# import * as user from './insight.graphql'

type Query {
  userapprovals(oid: String!, uid: String!, status: String): [Approval]
  organizationUserConnections(oid: String!, uid: String!): [ConnOrgUserConn]

  organizationAdmins(oid: String!) : [User]
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  passwordResetEmail(email: String!): responsePayload
  passwordUpdate(email: String!,oid: String!, oldpass: String!, newpass: String!): responsePayload
  refreshTokens(refreshToken: String!): refreshPayload
  alreadyOnboarded(oid: String!, uid: String!): responseOnBoarded
  changeEmail(uid: String!, email:String!): responsePayload

  disconnectConnection(input: ConnOrgUserConnInput!): Boolean
  completeOnBoarding(oid: String!, uid: String!): Boolean
  clearDeviceCache(oid: String!, uid: String!): Boolean
  createOrUpdateConnection(input: ConnectionInput!): Boolean

  allowNotification(input: NotificationInput!, oid: String!): Boolean
  allowSms(input: NotificationInput!, oid: String!): Boolean

  updateApproval(input: ApprovalInput): Approval
  deleteApproval(input: ApprovalDeleteInput): Approval  
  updateApprovals(input: [ApprovalInput], oid: String!, uid: String!, user: User_input!, status : String!, subject: String): Boolean

  messageAdmin(oid: String!, msg: String!, user: User_input!, subject: String!, from: String!): responsePayload
  
}
